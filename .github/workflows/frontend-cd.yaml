# Workflow Configuration
name: ThanhND Frontend CD Workflows

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
      
  # Automatic trigger on push events to the main branch
  push:
    branches:
      - main

  # Scheduled trigger at 4:30 AM UTC, weekday
  schedule:
    - cron: '30 4 * * 1-5'
  
env:
  # Set Node.js Version
  NODE_VERSION: '18.x'

jobs:
  lint-job:
    name: Lint Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code From Repository
        uses: actions/checkout@v3
        # Set up the Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: latest
        # Restore the npm cache to expedite the installation of dependencies.
      - name: Restore the Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies using npm
        run: cd ./starter/frontend && npm install
      - name: Verify code with Lint
        run: cd ./starter/frontend && npm run lint 

  test-job:
    name: Test Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code From Repository
        uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Restore the Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies using npm
        run: cd ./starter/frontend && npm install && npm ci
      - name: Run Test
        run: cd ./starter/frontend && npm run test

  install-build:
    runs-on: ubuntu-latest
    needs: [lint-job, test-job]

    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v3
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        run: cd ./starter/frontend && npm install && npm ci
      - name: Run Front end Test
        run: cd ./starter/frontend && npm run test

  frontend_deploy:
    runs-on: ubuntu-latest
    needs: install-build

    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Setup Credentials for AWS resources
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
      - name: Build Docker images
        run: |
          cd ./starter/frontend
          # echo ${{ vars.REACT_APP_MOVIE_API_URL }}
          docker build -t frontend:${GITHUB_SHA} .
      - name: Tag Docker Image
        run:
          cd ./starter/frontend && 
          docker tag frontend:${GITHUB_SHA} ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA}
      - name: Push Docker image to ECR
        run:
          cd ./starter/frontend && 
          docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA}
      - name: Login to access EKS cluster
        run:
          aws eks update-kubeconfig --name cluster --region us-east-1
      - name: Deploy to Kubernetes
        run:
          cd ./starter/frontend/k8s &&
          kustomize edit set image frontend=${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA} &&
          kustomize build | kubectl apply -f -
